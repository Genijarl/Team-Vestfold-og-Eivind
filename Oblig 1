

1. Fyll ut manglende tall i tabell


Binære tall              Hexadesimaltall	      Desimaltall
1101	                   0xD	                         13
110111101010	           DEA	                         3562 
1010111100110100	   0xAF34	                44852
1111111111111111	   FFFF 	                65535
10001011110001010 	   1178A	                71562


2. Forstå algoritmer og utføre “benchmark”-tester på koden
------------------------------------------------------------------------------------------------------------------------------------
Oppgave A) 

func Bubble_sort_modified(list []int) {
	n := len(list)
	swapped := true
	for swapped {
		swapped = false
		for i := 1; i < n-1; i++ {
			if list[i-1] > list[i] {
				// swap values using Go's tuple assignment
				list[i], list[i-1] = list[i-1], list[i]
				swapped = true
			}
		}
	}


}

Oppgave B)

// Skriv "benchmark"-tester for benchmarkBSortModified funksjonen
// Skriv en ny testfunksjon benchmarkBSortModified
func BenchmarkBSortModified100(b *testing.B) {
	benchmarkBSortModified(100, b)
}

func BenchmarkBSortModified1000(b *testing.B) {
	benchmarkBSortModified(1000, b)
}

func BenchmarkBSortModified10000(b *testing.B) {
	benchmarkBSortModified(10000, b)
}

func benchmarkBSortModified(i int, b *testing.B) {
	for j := 0; j < b.N; j++ {
		b.StopTimer()
		values := perm(i)
		b.StartTimer()
		Bubble_sort_modified(values)
	}
  
  Oppgave C)
  
  Benchmark						ns/op
BenchmarkBSortModified100-4               100000	22545
BenchmarkBSortModified1000-4                1000	1489716
BenchmarkBSortModified10000-4                 10	212672260
BenchmarkBSort100-4                       100000	19470
BenchmarkBSort1000-4                        1000	1439749
BenchmarkBSort10000-4                         10        213916890
BenchmarkQSort100-4                       500000	4858
BenchmarkQSort1000-4                       30000	59841
BenchmarkQSort10000-4                       1000	1791985

Får ikke til å lime inn noen grafisk presentasjon, ei heller et bilde. Men, vi ser av nanosekund per operasjon ns/op 
hvilke operasjoner som brukte kortest og lengst tid.

BSortModified 100-4 brukte lengre tid enn eksempeloppgaven BSort 100-4. Qsort 100-4 gikk fortest av de 3.
BSortModified 1000-4 var såvidt tregere enn Bsort 1000-4. Qsort 1000-4 var også her den kjappeste operasjonen.
BsortModified 10000-4 var kjappere enn Bsort 10000-4 og Qsort10000-4 var kjappest.

Big-O:
Forstår det slik fra grafen i http://bigocheatsheet.com/ at
QuickSort algorytmen kan håndtere fler operasjoner over flere elementer enn Bubblesort og Bullesort modified.

3. Forstå prosessadministrajon på et platform
-------------------------------------------------------------------------------------------------------------------------
Vi har lagd en evig løkke:
package main

func main() {
for {

}

}

Hverken av de 3  SIGINT commands (CTRL + C, DELETE eller Break) fungerer i kontrollterminalen...
Men ved å presse STOP knappen i terminalen får vi Exit code 2. (som angivelig er signalkoden for SIGINT).
Klarer ikke å generere andre exit codes.



