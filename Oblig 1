

1. Fyll ut manglende tall i tabell


Binære tall              Hexadesimaltall	      Desimaltall
1101	                   0xD	                         13
110111101010	           DEA	                         3562 
1010111100110100	   0xAF34	                44852
1111111111111111	   FFFF 	                65535
10001011110001010 	   1178A	                71562

OPPGAVE A
I det hexadesimale tallsystemet har vi 16 forskjellige sifre; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Dette innebærer at én posisjon i det binære systemet tilsvarer 1 bokstav eller et tall i hex. Har vi et lengre binært tall, kan vi dermed dele dette inn i grupper på fire sifre og regne om hvert siffer for seg til hex. F.eks.: 
Bin	1101	0010	1010	11010010
Hex	D	2	A	D2
Slik går man fra binært til hexadesimal.

Den enkleste måten å gå fra et heksadesimalt tall til et binært tall er ved å rett og slett se på hvert enkelt siffer i det heksadesimale tallet og finne det tilsvarende binære tallet, for så å slå de binære tallene vi har funnet sammen i akkurat den samme rekkefølgen som de sto i det heksadesimale tallet. 
Eks: 
Hex: B		4	A	6
Bin: 1011	100 	1010	110

For å gjøre om desimaltall til et binært tall så er det en enkel algoritme. 
Del det gitte tallet på to (heltalsdivisjon). Får vi rest?
– Ja: skriv ned resten (alltid 1 for binære tall)
– Nei: skriv 0
• Start på toppen igjen, helt til svaret på heltallsdivisjonen er 0
Eks: 
83:2 = 41, (+0.5) Dette tilsvarer en rest, og skriver derfor 1.
41:2 = 20 (+0.5) Dette tilsvarer en rest, skriver derfor 1
20:2 = 10 Ingen rest og blir derfor 0. 

For å gjøre et binært tall til desimaltall så innebærer det samme prinsipp, bare motsatt. 
Det binære tallsystemet har grunntallet 2, og består kun av sifrene 0 og 1. Vi bruker igjen formelen
verdi = siffer ∗ grunntallposisjon.
Eksempel:
101010(2)
Posisjon	Siffer	Utregning
0		0	0*2(0) = 0*1= 0(10)
1		1	1*2(1) = 1*2= 2(10)
2		0	0*2(2) = 0*4 = 0(10)
3		1	1*2(3) = 1*8 = 8(10)
4		0	0*2(4) = 0*16 = 0(10)
5		1	1*2(5) = 1*32 = 32(10)

Summen av verdiene er nå:
 32 + 8 + 2 = 42(10) = 101010(2)	

OPPGAVE B
Hexadesimal til desimal
Utregningen fra et desimalt tall til et heksadesimalt tall følger de samme linjene som konvertering
fra et desimalt tall til et binært tall, bortsett fra at vi deler på 16 i stedet for 2. Algoritmen blir da:
Del tallet på 16 (heltallsdivisjon). Får vi rest?
– Ja: skriv ned resten
– Nei: skriv 0
• Start på toppen igjen, helt til svaret på heltallsdivisjonen er 0
Det heksadesimale tallsystem har grunntallet 16, og har verdiene 0 til og med 9, og a til og med
f.  Slik oversetter man bokstavene om til tall:
Heksadesimal 	Desimal
A 		10
B 		11
C 		12
D 		13
E 		14
F 		15
Vi bruker igjen formelen: verdi = siffer ∗ grunntallposisjon
F.eks.: 
DEF (16)
Posisjon	Siffer		Utregning
0		F		15*16(0) = 15*0 = 15(10)
1		E		14*16(1) = 14*16 = 224(10)
2		D		13*16(2) = 13*256 = 3328(10)
Da blir summen av verdiene = 15 + 224 + 3328 = 3567(10) = DEF(16).


2. Forstå algoritmer og utføre “benchmark”-tester på koden
------------------------------------------------------------------------------------------------------------------------------------
Oppgave A) 

func Bubble_sort_modified(list []int) {
	n := len(list)
	swapped := true
	for swapped {
		swapped = false
		for i := 1; i < n-1; i++ {
			if list[i-1] > list[i] {
				// swap values using Go's tuple assignment
				list[i], list[i-1] = list[i-1], list[i]
				swapped = true
			}
		}
	}


}

Oppgave B)

// Skriv "benchmark"-tester for benchmarkBSortModified funksjonen
// Skriv en ny testfunksjon benchmarkBSortModified
func BenchmarkBSortModified100(b *testing.B) {
	benchmarkBSortModified(100, b)
}

func BenchmarkBSortModified1000(b *testing.B) {
	benchmarkBSortModified(1000, b)
}

func BenchmarkBSortModified10000(b *testing.B) {
	benchmarkBSortModified(10000, b)
}

func benchmarkBSortModified(i int, b *testing.B) {
	for j := 0; j < b.N; j++ {
		b.StopTimer()
		values := perm(i)
		b.StartTimer()
		Bubble_sort_modified(values)
	}
  
  Oppgave C)
  
  Benchmark						ns/op
BenchmarkBSortModified100-4               100000	22545
BenchmarkBSortModified1000-4                1000	1489716
BenchmarkBSortModified10000-4                 10	212672260
BenchmarkBSort100-4                       100000	19470
BenchmarkBSort1000-4                        1000	1439749
BenchmarkBSort10000-4                         10        213916890
BenchmarkQSort100-4                       500000	4858
BenchmarkQSort1000-4                       30000	59841
BenchmarkQSort10000-4                       1000	1791985

Får ikke til å lime inn noen grafisk presentasjon, ei heller et bilde. Men, vi ser av nanosekund per operasjon ns/op 
hvilke operasjoner som brukte kortest og lengst tid.

BSortModified 100-4 brukte lengre tid enn eksempeloppgaven BSort 100-4. Qsort 100-4 gikk fortest av de 3.
BSortModified 1000-4 var såvidt tregere enn Bsort 1000-4. Qsort 1000-4 var også her den kjappeste operasjonen.
BsortModified 10000-4 var kjappere enn Bsort 10000-4 og Qsort10000-4 var kjappest.

Big-O:
Forstår det slik fra grafen i http://bigocheatsheet.com/ at
QuickSort algorytmen kan håndtere fler operasjoner over flere elementer enn Bubblesort og Bullesort modified.

3. Forstå prosessadministrajon på et platform
-------------------------------------------------------------------------------------------------------------------------
Vi har lagd en evig løkke:

package main


func main() {
		for {
		}
}

ved SIGINT signal kommando CTRL + C og CTRL + Break får vi exit status 2
interrupt kommandoen "delete" fungerer ikke i vår terminal.


Oppgave 4
a) Vi har produsert følgende kode: for funksjon IterateOverASCIIStringLiteral

package main

import (
	"fmt"
)

//comment
const ascii = "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff" +
	` !"#$%&'()*+,-./0123456789:;<=>?` +
	`@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_` +
	"`abcdefghijklmnopqrstuvwxyz{|}~\x7f"



func main() {
	IterateOverASCIIStringLiteral(ascii)
}
func IterateOverASCIIStringLiteral(sl string) {
	for i := 0; i < len(sl); i++ {
		fmt.Printf("%X %+q %b \n", sl[i], sl[i], sl[i])
	}
}

utskriften er som v. eksempel:
3E > 111110
BA º 10111010
BB » 10111110
BF ¿ 10111111
C0 À 11000000
C1 Á 11000001


 "analyser utskriften (spesielt for bytes fra 0x80 til 0x9F)"
 
 Vi ser av utskriften at bytes fra 0x80 til 0xFF skriver Unicode
 samt Hexadec fra 10000000 til 11111111





