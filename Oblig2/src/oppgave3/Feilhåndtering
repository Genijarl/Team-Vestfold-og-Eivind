Feilhåndtering for filen addup.go:

tall1, err := strconv.Atoi(n1)
if (err != nil) {
   fmt.Println("Input not valid. Needs a type int")
   os.Exit(0)
}

fmt.Println("Enter num: ")
fmt.Scan(&n2)

tall2, err := strconv.Atoi(n2)
if (err != nil) {
   fmt.Println("Input not valid. Needs a type int")
   os.Exit(0)
}

Error handlingen sørger for at integer er den eneste input verdien man kan sette. Dersom man setter inn en verdi av type string 
vil man få opp feilmeldingen under fmt.Println. Dette vil man få opp både for varibelen tall1 og variabelen tall2 dersom man 
skriver en string i stedet for en int verdi i en av disse.


Feilhåndtering for filen sumfromfile.go:

func readLines(path string) ([]string, error) {
   file, err := os.Open(path)
   if err != nil {
      return nil, err
   }
   defer file.Close()

Denne funksjonen bruker en path av type string til å registrere antall strings i funksjonen. 
Videre  bruker den os.Open for å åpne en path. Hvis error = 0, så vil funksjonen gjennomføres. 
Dersom den har en annen verdi vil den lage en error melding.  
Defer vil lukke filen uavhengig av hvor mange statements filen inneholder. Man bruker defer for å gjøre funksjonene enklere.



func sumfromfile()  {
   lines, err := readLines("result.txt")
   if err != nil {
      log.Fatalf("readLines: %s", err)
   }
Denne koden leser antall linjer i filen result.txt ved å bruke funksjonen readLines. 
Dersom error er forskjellig fra null, vil den bruke kommandoen log.Fatalf for å logge en error av type string.



f, err := os.OpenFile("result.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
if err != nil {
   log.Fatal(err)
}
Denne koden bruker os.OpenFile for å åpne result.txt. Os.O_APPEND sender dataen man tilføyer underveis til filen. 
Os.O_CREATE lager en ny fil dersom den ikke allerede eksiterer. Os.O_WRONLY åpner filen så man kan skrive i den. 
Dersom error er forskjellig fra null, vil den bruke kommandoen log.Fatal til å logge en error.



if _, err := fmt.Fprintf(f,"\n%d\n", result); err != nil {
   log.Fatal(err)
}
Denne koden bruker fmt.Fprintf til å printe tallet %d. /n indikerer at tallet skal printes på en ny linje. 
Siden det er /n også etter %d, vil resultatet printes på en ny linje under tallet som %d representerer. 
Dersom error er forskjellig fra null, vil den bruke kommandoen log.Fatal til å logge en error.



if err := f.Close(); err != nil {
   log.Fatal(err)
}
Denne koden bruker f.Close() til å lukke filen. Dersom error er forskjellig fra null vil den bruke kommandoen log.Fatal 
til å logge error. 



Feilhåndtering for filen addtofile.go:

file, err := os.Create("result.txt")
if err != nil {
   log.Fatal("Cannot create file", err)
}
defer file.Close()
Denne funksjonen bruker os.Create til å opprette result.txt. 
Dersom den error er forskjellig fra null, vil den bruke kommandoen log.Fatal til å logge «Cannot create file». 
Defer vil lukke filen uavhengig av hvor mange statements filen inneholder. Man bruker defer for å gjøre funksjonene enklere.



f, err := os.OpenFile("result.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
if err != nil {
   log.Fatal(err)
}
Denne koden bruker os.OpenFile for å åpne result.txt. Os.O_APPEND sender dataen man tilføyer underveis til filen. 
Os.O_CREATE lager en ny fil dersom den ikke allerede eksiterer. 
Os.O_WRONLY åpner filen så man kan skrive i den. Dersom error er forskjellig fra null, vil den bruke kommandoen log.Fatal 
til å logge en error.



if _, err := fmt.Fprintf(f, "%d\n%d", n1, n2); err != nil {
   log.Fatal(err)
}
Denne koden bruker fmt.Fprintf til å printe tallet %d. /n indikerer at tallet skal printes på en ny linje. 
Siden det er /n også etter %d, vil variablene printes på en ny linje under tallet som %d representerer. 
Dersom error er forskjellig fra null, vil den bruke kommandoen log.Fatal til å logge en error.



if err := f.Close(); err != nil {
   log.Fatal(err)
}
Denne koden bruker f.Close() til å lukke filen. Dersom error er forskjellig fra null vil den bruke kommandoen log.Fatal 
til å logge error.



func checkErr(e error) {
   if e != nil {
      panic(e)
   }
}
Denne funksjonen bruker checker for å se etter feil i koden. Dersom den finner feil vil den utføre kommandoen panic(e). 
Panic er en innebygd funksjon i go språket som gjør at den ordinære flyten i koden stopper opp. Deretter vil den få panikk. 
Dette vil si at når en funksjon kaller på panic vil den stoppe utførelsen av denne funksjonen. 
Den vil fortsette å utføre defer funksjoner i koden.



func readResult(path string) {
   data, err := ioutil.ReadFile(path)
   checkErr(err)

   tempData := string(data)
   stringData := strings.Split(tempData, "\n")
   temp := stringData[len(stringData)-2]

   resultat, err := strconv.Atoi(temp)
   checkErr(err)

   fmt.Println("Result from file: ", resultat)
}
Funksjonen readResult oppretter en path av typen string. Videre implementerer ioutil.ReadFile(path) en input/output funksjon til pathen. 
Videre i koden implementerer vi verdier i form av string. Strconv.Atoi(temp) konverterer verdiene i temp fra string over til 
integer verdier, og sjekker dem for error ved å bruke checkErr. Etter dette er gjort vil den printe det som står i fmt.Println.

